

			// SERVER OLD

/*
SOCKET server;

void processArgs(const char *args ){
	int i, port=0, len=strlen(args);
	string IP="";
	for(i=0;i<len;i++){
		if(args[i]==':')
			break;
		IP+=args[i];
	}
	server.ip=IP;
	i++;
	for(;i<len;i++){
		port = port*10 + (args[i]-'0');
	}
	server.portNo=port;
}

int main(int argc, char const *argv[]) 
{ 
	if(argc != 2){
		cout<<"Invalid no. of args\n";
		exit(0);
	}
	processArgs(argv[1]);
	cout<<server.ip<<" "<<server.portNo<<endl;
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
        int addrlen = sizeof(address);

        // Creating socket file descriptor
        if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
        {
            perror("socket failed");
            exit(EXIT_FAILURE);
        }

        // Forcefully attaching socket to the port 8080
        if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                       &opt, sizeof(opt)))
        {
            perror("setsockopt");
            exit(EXIT_FAILURE);
        }

        char IP[15];
        string str=server.ip;
        cout<<server.ip<<endl;
        strcpy(IP,str.c_str());
        cout<<IP<<endl;
        //strcpy(char_array, s.c_str());

        address.sin_family = AF_INET;
        address.sin_addr.s_addr = inet_addr(IP);
        address.sin_port = htons(server.portNo);

        // Forcefully attaching socket to the port 8080
        if (bind(server_fd, (struct sockaddr *)&address,
                 sizeof(address)) < 0)
        {
            perror("bind failed");
            exit(EXIT_FAILURE);
        }
        if (listen(server_fd, 10) < 0)
        {
            perror("listen");
            exit(EXIT_FAILURE);
        }
        while (1)
        {
            if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0)
            {
                perror("Error in accept connection");
                exit(EXIT_FAILURE);
            }
            cout<<"connected\n";

        }
    return 0; 
} */


---------------------------------------------------------------------------------------------------

/*
SOCKET client;


void processArgs(const char *args ){
	int i, port=0, len=strlen(args);
	string IP="";
	for(i=0;i<len;i++){
		if(args[i]==':')
			break;
		IP+=args[i];
	}
	client.ip=IP;
	i++;
	for(;i<len;i++){
		port = port*10 + (args[i]-'0');
	}
	client.portNo=port;
}   

int main(int argc, char const *argv[]) 
{ 
 	if(argc != 2){
		cout<<"Invalid no. of args\n";
		exit(0);
	}
	int sock = 0;
        struct sockaddr_in serv_addr;
        if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
        {
            printf("\n Socket creation error in client side\n");
            return -1;
        }

        memset(&serv_addr, '0', sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(8080);

        char IP[15];
        string str="127.0.0.1";
        strcpy(IP, str.c_str());
        cout<<IP<<endl;
        //Convert IPv4 and IPv6 addresses from text to binary form
        if (inet_pton(AF_INET, IP, &serv_addr.sin_addr) <= 0)
        {
            printf("\nClient File  : Invalid address/ Address not supported \n");
            return -1;
        }

        if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        {
            printf("\nConnection Failed in client side\n");
            return -1;
        }
        cout<<"connected\n";
    return 0; 
} */